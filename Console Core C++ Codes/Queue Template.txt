#pragma once;
#include <iostream>
#include "Double_lined.h"
using namespace std;
template <typename T>
struct Node{
	T data; 
	Node<T>*next;
	Node<T>*prev;
};
template <class T>
class Queue {
	Node<T> *head,* tail;
	int count; int maxcount;
public:
	Queue();
	Queue(int max);
	Queue(const Queue<T>&obj);
	~Queue();
	void enqueue(T value);
	T dequeue();
	void Clear();
	bool isEmpty();
	bool isFull();
	int GetCount();
	Node<T>* newnode(T k){ Node<T> *temp=new Node<T>;
	temp->data = k;
	temp->next = NULL; temp->prev = NULL;
	return temp;
	}
	void Show();
	int getcount()const;
	int getmax() const;
	void setmax(int);
	Queue<T>& operator= (const Queue<T>obj);
	Queue<T> operator+ (const Queue<T> obj);
	Queue<T> operator *(const Queue<T> obj);
	void AddTail(T value);
	bool compare(T value)const;
	T getValue(int)const;
};
template<typename T>
T Queue<T>::getValue(int index)const{
	if (count==0){
		return -1;
	}
	else if (index<0 || index>count)
	{
		cout << "OutofBoundaryError!" << endl;
		return -1;
	}
	else {
		Node<T>*current = head;
		for (int i = 0; i < index; i++)
		{
			current = current->next;
		}
		return current->data;
	}
}
template <typename T>
void Queue<T>::setmax(int value){
	maxcount = value;
}
template <typename T>
bool Queue<T>::compare(T value)const{
	Node<T>*current = head;
	while (current != NULL)
	{
		if (current->data == value)
		{
			return true;
		}current = current->next;
	} return false;
}
template <typename T>
void Queue<T>::AddTail(T value){
	if (isFull()){
		cout << "Queue is full!" << endl; return;
	}
	Node<T>*temp = head;
	Node<T>* newNode = newnode(value);
	if (head == NULL){
		head = tail = newNode; count++;
		return;
	}
	while (temp->next != NULL)
		temp = temp->next;
	tail=temp->next = newNode;
	newNode->prev = temp; count++;
	}
template <typename T>
Queue<T>::Queue() :count(0), maxcount(25){
	head = tail = NULL;
}
template <typename T>
Queue<T>::Queue(int max) : count(0), maxcount(max){
	head = tail = NULL;
}
template <typename T>
Queue<T>::~Queue(){
	 Clear();
}
template <typename T>
int Queue<T>::getcount()const{
	return count;
}
template <typename T>
int Queue<T>::getmax()const{
	return maxcount;
}
template <typename T>
Queue<T>::Queue(const Queue<T>&obj){
	count = 0; maxcount = obj.getmax();
	head = tail = NULL;
	for (int i = 0; i < obj.getcount(); i++)
	{
		AddTail(obj.getValue(i));
	}

}
template <typename T>
void Queue<T>::enqueue(T value){
	if (count == maxcount){
		cout << "Queue is full!";
		return;
	}
	Node<T>*temp = newnode(value);
	if (head != NULL){
		head->prev = temp;
		temp->next = head;
		}
	if (count == 0){
		head = tail = temp;
	}
	else head = temp;
	count++; 
}
template <typename T>
T Queue<T>::dequeue(){
	T temp;
	if (isEmpty())
		return NULL;
	else {
		temp = tail->data;
		Node<T>* current = tail;
		tail = current->prev;
		tail->next = NULL;
		delete current; count--;
	}
	return temp;
}
template<typename T>
void Queue<T>::Clear(){
	Node<T>*del = head;
	while (del != NULL)
	{
		head = head->next;
		delete del;
		del = head;
	}
	tail = head = NULL;
}
template<typename T>
bool Queue<T>::isEmpty(){
	return count == 0;
}
template<typename T>
bool Queue<T>::isFull(){
	return count == maxcount;
}
template <typename T>
int Queue<T>::GetCount(){
	return count;
}
template<typename T>
void Queue<T>::Show(){
	if (!(isEmpty()))
	{
		Node<T>*current = head;
		int out = 0;
		while (current != 0)
		{
			cout << current->data << " ";
			out++; 
			if ((out % 10) == 0)
			{
				cout << endl;
			}current = current->next;
		}cout << endl;
	}
	else cout << "Queue is empty!" << endl;

}
template<typename T>
Queue<T>& Queue<T>::operator=(const Queue<T>obj){
	if (this == &obj)
		return *this;
	Clear();
	Node<T>*temp = obj.head;
	while (temp != 0){
		AddTail(temp->data);
		temp = temp->next;
	}return *this;
}
template <typename T>
Queue<T> Queue<T>::operator +(const Queue<T> obj)
{
	Queue<T> result(*this);
	Node<T>*temp = obj.head;
	while (temp != 0)
	{
		result.AddTail(temp->data);
		temp = temp->next;
	}
	return result;
}
template <typename T>
Queue<T> Queue<T>::operator *(const Queue<T> obj){
	Queue<T> result(obj); result.setmax(maxcount + obj.getmax());
	Node <T>*current = head;
	int i = 0;
	while (current != NULL)
	{
		if (obj.compare(current->data)) { current = current->next; continue; }
		else { result.enqueue(current->data); current = current->next; }
	}
		
	return result;
}

main.cpp:
#include <iostream>
#include "Double_lined.h"
using namespace std;

int main(){
	 Queue<int>one;
	one.enqueue(5);
	one.enqueue(8);
	one.enqueue(9);
	one.enqueue(10);
	one.dequeue();
	one.dequeue();
	Queue<int>two;
	two = one;
	two.Show(); cout << endl;
	Queue<int>three(two);
	three.Show(); cout << endl;
	three = one+two;
	three.Show();
	three = one*two;
	three.Show();
	system("pause");
	return 0; 
}
